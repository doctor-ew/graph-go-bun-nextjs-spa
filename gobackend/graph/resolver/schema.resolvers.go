// /gobackend/src/graph/schema.resolvers.go

package graph


			// This file will be automatically regenerated based on the schema, any resolver implementations
			// will be copied through when generating and any unknown code will be moved to the end.
			// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
"context"
"fmt"
"io"
"strconv"
"time"
"sync"
"errors"
"bytes"
gqlparser "github.com/vektah/gqlparser/v2"
"github.com/vektah/gqlparser/v2/ast"
"github.com/99designs/gqlgen/graphql"
"github.com/99designs/gqlgen/graphql/introspection"
"github.com/doctor-ew/graph-spa-bun/gobackend/graph/model"
"github.com/doctor-ew/graph-spa-bun/gobackend/graph")


















// CreateRickAndMortyAssociation is the resolver for the createRickAndMortyAssociation field.
	func (r *mutationResolver) CreateRickAndMortyAssociation(ctx context.Context, rickID string, mortyID string) ( *model.RickAndMortyAssociation,  error){
		// Implement the logic to create an association here
	// This might involve fetching the Character by rickId and mortyId
	// and then creating an association in your data store

	// This is a placeholder implementation
	return &model.RickAndMortyAssociation{
		Rick:    /* fetched Rick character */,
		Morties: /* array with the fetched Morty character */,
	}, nil
}
	}

// CharactersByName is the resolver for the charactersByName field.
	func (r *queryResolver) CharactersByName(ctx context.Context, name string) ( []*model.Character,  error){
		panic(fmt.Errorf("not implemented: CharactersByName - charactersByName"))
	}

// EpisodesByIds is the resolver for the episodesByIds field.
	func (r *queryResolver) EpisodesByIds(ctx context.Context, ids []string) ( []*model.Episode,  error){
		panic(fmt.Errorf("not implemented: EpisodesByIds - episodesByIds"))
	}

// RickAndMortyAssociations is the resolver for the rickAndMortyAssociations field.
	func (r *queryResolver) RickAndMortyAssociations(ctx context.Context) ( []*model.RickAndMortyAssociation,  error){
		panic(fmt.Errorf("not implemented: RickAndMortyAssociations - rickAndMortyAssociations"))
	}



// Mutation returns graph.MutationResolver implementation.
	func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }
// Query returns graph.QueryResolver implementation.
	func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }


type mutationResolver struct { *Resolver }
type queryResolver struct { *Resolver }



